class Solution {
public:
    void dfs1(int u,int p,vector<vector<int>>&adj,vector<int>&dis,vector<int>&par,int d){
        dis[u]=d;
        par[u]=p;
        for(int v:adj[u]){
            if(v!=p){
             dfs1(v,u,adj,dis,par,d+1);
            }
        }
    }
    int dfs2(int u,vector<vector<int>>&adj,vector<int>&amount,int p){
        int amt=amount[u];
        int mx=-INT_MAX;
        for(auto v:adj[u]){
            if(v!=p){
                mx=max(mx,dfs2(v,adj,amount,u));
            }
        }
        //if the node is leaf we just return its amount
        if(mx==-INT_MAX) return amt;
        else return amt+mx;
    }
    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
        int n=amount.size();
        vector<vector<int>>adj(n,vector<int>());
        vector<int>dis(n);
        vector<int>par(n);
        for(auto &e:edges){
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        dfs1(0,0,adj,dis,par,0);
        // for(auto i:dis){
        //     cout<<i;
        // }
        // cout<<"parent";
        // for(auto i:par){
        //     cout<<i;
        // }

        //updating path for bob
        int cur=bob;
        int bob_dis=0;
        while(cur!=0){
            if(dis[cur]>bob_dis) amount[cur]=0;
            else if(dis[cur]==bob_dis) amount[cur]/=2;
            cur=par[cur];
            bob_dis++;
        }
        return dfs2(0,adj,amount,0);
    }
};